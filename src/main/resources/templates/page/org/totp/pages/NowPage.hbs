<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>Top of the Poops - Sewage Overflows Right Now</title>
    <meta name="description" content="Analysing sewage dumps by water companies in the UK">

    {{> chunks/favicons }}
    {{> chunks/meta-styles }}
    {{> chunks/meta-scripts }}

    {{> components/meta-opengraph
            title=share.text
            description="Live Sewage Map"
            twitterImageUri=share.twitterImageUri
    }}

    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
{{> chunks/navbar }}

<div class="container">
    <div class="row align-items-center">
        <div class="col-md-6">
            <div style="min-height: 500px;" id="now">
                <div></div>
            </div>
            <form>
                <div class="row">
                    <div class="col-md-6 offset-4">
                        <img style="height:1.5em;" alt="move start" id="ctrl-le" src="/assets/icons/bi/chevron-bar-left.svg"/>
                        <img style="height:1.5em;" alt="move earlier 1 day" id="ctrl-ld" src="/assets/icons/bi/chevron-double-left.svg"/>
                        <img style="height:1.5em;" alt="move earlier" id="ctrl-l" src="/assets/icons/bi/chevron-left.svg"/>
                        <img style="height:1.5em;" alt="move later" id="ctrl-r" src="/assets/icons/bi/chevron-right.svg"/>
                        <img style="height:1.5em;" alt="move later 1 day" id="ctrl-rd" src="/assets/icons/bi/chevron-double-right.svg"/>
                        <img style="height:1.5em;" alt="move end" id="ctrl-re" src="/assets/icons/bi/chevron-bar-right.svg"/>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="dateSlider" class="col-md-4 col-form-label"><span id="dateSliderValue"></span></label>
                    <div class="col-md-8">
                        <input id="dateSlider" type="range" class="form-range">
                    </div>
                </div>
            </form>
        </div>
        <div class="col-md-5">
            <div class="display-5 mt-2">Live Overflow Map</div>

            <p>Here are the CSOs in England that we know are overflowing right now. We are using the Water Companies'
                own data, updated every 15 minutes.</p>

            <p>Each dot represents an overflowing CSO - Each Water Company has a different colour</p>

            <p>Blue squares represent rainfall, if there is any - the darker the blue, the more rain.</p>

            <p>With your support we can do more... so please <a href="/support">
                <span class="btn btn-primary me-1">Donate</span>
            </a></p>

            <div class="table-responsive">
                <table id="table-stream-summary" data-id="stream-summary" class="table table-spills table-striped">
                    <thead>
                    <tr>
                        <td>Company</td>
                        <td>Total CSOs</td>
                        <td>Not Overflowing</td>
                        <td>Overflowing</td>
                    </tr>
                    </thead>
                    <tbody>
                    {{#each summary.companies}}
                        <tr>
                            <td>{{this.company}}</td>
                            <td class="text-end">{{numberFormat this.count.total}}</td>
                            <td class="text-end">{{numberFormat this.count.stop}}</td>
                            <td class="text-end">{{numberFormat this.count.start}}</td>
                        </tr>
                    {{/each}}
                    </tbody>
                    <tfoot>
                    <tr>
                        <td><em>Totals</em></td>
                        <td class="text-end">{{numberFormat summary.count.total}}</td>
                        <td class="text-end">{{numberFormat summary.count.stop}}</td>
                        <td class="text-end">{{numberFormat summary.count.start}}</td>
                    </tr>
                    </tfoot>
                </table>
            </div>

            <p>Yorkshire Water, Dwr Cymru and Scottish Water are not yet here... they are coming soon</p>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col">
            {{#> components/section title="How do we interpret the data?" }}
                <div class="row">
                    <div class="col">
                        <div class="mb-4">
                            <p>You might notice that some of the figures in the above chart, particularly around how
                                long
                                a CSO has been overflowing, are different from the figures on other websites. We use a
                                more
                                sophisticated model to figure out when CSOs really started overflowing.</p>

                            <p>The water companies send a signal each time a CSO overflows, saying that it has 'Started'
                                and telling us when. Sometimes though, it sends multiple 'Started' events in a row. One
                                event will say 'Started at 1pm', the next 'Started at 3pm', the next 'Started at
                                10pm'...</p>

                            <p>Its clear though that despite the latest alert being 'Started at 10pm', the overflow did
                                actually start at 1pm - so the CSO has been overflowing for far longer. This is how we
                                keep track
                                of the state of each CSO overflow, and why our numbers are different, we don't just rely
                                on the
                                latest information.</p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md">
                        <figure class="figure">
                            <img class="img-fluid" src="/assets/images/stream-multiple-events.png"
                                 alt="An image showing some database records as supplied by Uk Water"/>
                            <figcaption class="figure-caption">How we receive the data.</figcaption>
                        </figure>
                    </div>
                    <div class="col-md">
                        <figure class="figure">
                            <img class="img-fluid" src="/assets/images/stream-interpreted-event.png"
                                 alt="An image showing our interpretation of those records, there are far fewer"/>
                            <figcaption class="figure-caption">After we've interpreted it.</figcaption>
                        </figure>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <p>There may be errors in our interpretation... and if we find any we're committed to updating
                            this
                            information so that it is as accurate as possible. If you find an error, please let us
                            know.</p>
                    </div>
                </div>
            {{/components/section}}
        </div>
    </div>
</div>

<script type="module">
    import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

    function msToTime(ms) {
        let seconds = (ms / 1000).toFixed(1);
        let minutes = (ms / (1000 * 60)).toFixed(1);
        let hours = (ms / (1000 * 60 * 60)).toFixed(1);
        let days = (ms / (1000 * 60 * 60 * 24)).toFixed(1);
        if (seconds < 60) return seconds + " sec";
        else if (minutes < 60) return minutes + " min";
        else if (hours < 24) return hours + " hrs";
        else return days + " days"
    }

    const chart = ({asof, sewage, rainfall, countries}) => {
        sewage = sewage.map(
                e => {
                    const started = Date.parse(e.started);
                    const duration = asof - started;
                    return {
                        started,
                        duration,
                        ...e,
                    }
                }
        )

        const rainfallScale = Plot.scale({
            color: {
                scheme: "Blues",
                domain: [0, 10 / 4], // 10 mm/h (7.5mm/h is 'heavy'), but we are every 15 mins
            }
        })

        return Plot.plot(
                {
                    projection: {
                        type: "mercator",
                        domain: {
                            type: "MultiPoint",
                            coordinates: [[-6, 49.9], [1.8, 55.9]],
                        },
                    },
                    height: 800,
                    r: {range: [3, 20], domain: [0, 86400 * 30 * 1000]},
                    marks: [
                        Plot.geo(
                                countries,
                                {
                                    fill: "rgba(167,198,167,0.19)",
                                    stroke: "rgba(0,0,0,0.2)",
                                    strokeWidth: 2,
                                }
                        ),
                        Plot.rect(
                                rainfall,
                                {
                                    x1: "xmin",
                                    y1: "ymin",
                                    x2: "xmax",
                                    y2: "ymax",
                                    opacity: 0.7,
                                    filter: d => d.rain > 0,
                                    fill: d => rainfallScale.apply(d.rain)
                                }
                        ),
                        Plot.dot(
                                sewage,
                                {
                                    x: d => d.loc.lon,
                                    y: d => d.loc.lat,
                                    r: d => d.duration,
                                    fill: "company",
                                    opacity: 0.5,
                                    mixBlendMode: "multiply",
                                    title: d => `${d.company} ${d.id} - Overflowing since ${d.started} - Duration ${msToTime(d.duration)}`,
                                }
                        )
                    ]
                }
        );
    };

    const countries = await fetch("/data/v1/2024/geo/countries.json").then(it => it.json());

    const slider = document.getElementById('dateSlider');
    const sliderValue = document.getElementById('dateSliderValue');
    const chartElement = document.getElementById("now")

    const now = new Date();

    slider.min = Date.parse("2025-01-01T00:00:00Z").valueOf();
    slider.max = now.getTime();
    slider.value = slider.max;
    slider.step = 60 * 60 * 1000;

    const updateDate = (d) => sliderValue.textContent = d.toLocaleString();

    const actions = {
        "ctrl-le": () => slider.value = slider.min,
        "ctrl-ld": () => slider.valueAsNumber -= 86400 * 1000,
        "ctrl-l": () => slider.valueAsNumber -= 60 * 60 * 1000,
        "ctrl-r": () => slider.valueAsNumber += 60 * 60 * 1000,
        "ctrl-rd": () => slider.valueAsNumber += 86400 * 1000,
        "ctrl-re": () => slider.value = slider.max,
    }

    Object.keys(actions).forEach(id => {
        const el = document.getElementById(id);
        el.addEventListener('click', (_) => {
            const action = actions[id];
            if (action != null ) {
                return actions[id]() && slider.dispatchEvent(new Event('input'));
            }
        })
    })

    const doChart = async (date) => {

        updateDate(date);

        let epochMillis = date.getTime();

        const sewage = await fetch(`/live/stream/overflowing/${epochMillis}`)
        const rainfall = await fetch(`/live/environment-agency/rainfall/grid/${epochMillis}`)

        if (sewage.ok) {
            chartElement.replaceChildren(
                    chart({
                        asof: date,
                        sewage: await sewage.json(),
                        rainfall: await rainfall.json(),
                        countries: countries
                    })
            );
        }
    }

    slider.addEventListener('input', (e) => doChart(new Date(e.target.valueAsNumber)))
    slider.addEventListener('change', (e) => doChart(new Date(e.target.valueAsNumber)))

    doChart(now);

</script>

{{> chunks/footer }}


</body>
</html>