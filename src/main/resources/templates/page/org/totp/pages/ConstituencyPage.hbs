<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>Top of the Poops | Constituency | {{ name }}</title>
    <meta name="description" content="Analysing sewage dumps by water companies in {{ name }}">

    {{> chunks/favicons }}
    {{> chunks/meta-styles }}
    {{> chunks/meta-scripts }}

    <link rel="stylesheet" href="/assets/css/leaflet.css"/>
    <script src="/assets/js/leaflet-1.9.3/leaflet.js"></script>

    {{> components/meta-opengraph title=(concat "Constituency | " name) }}

    <meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<body>
{{> chunks/title }}

<div class="jumbotron jumbotron-fluid">
    <div class="container">
        <h3>{{ name.value }} polluted by sewage {{numberFormat summary.count.count}} times in {{summary.year}} - lasting
            {{numberFormat summary.duration.hours}} hours</h3>
    </div>
</div>


<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <div id="map" class="map">
                <div style="display:none" data-map-attribution>
                    &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors <br/>
                    Contains OS Data &copy; Crown copyright &amp; database right 2021-2022<br/>
                    &copy; <a href="https://top-of-the-poops.org">Top of the Poops</a> 2021-2023
                </div>
            </div>
            <div style="display: none" id="map-geojson">{{geojson}}</div>
        </div>
        <div class="col">
            <div class="row">
                <div class="col">
                    <div role="alert" class="fade alert alert-success show">Select the constituency from the drop-down
                    </div>
                    <form>
                        <div class="form-group">
                            <label class="form-label">Constituency</label>
                            <select class="custom-select custom-select-lg" name="constituency" id="constituency-select">
                                {{#each constituencies}}<option value="{{this.uri}}" {{#if this.current}}selected{{/if}}>{{#if this.live}}✔ {{else}}- {{/if}}{{this.name}}</option>
                                {{/each}}
                            </select>
                            <script>
                                document.getElementById("constituency-select")
                                        .onchange = (e) => window.location = e.target.value;
                            </script>
                            <div class="form-text">✔ means we have experimental daily data for 2023</div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="card  mb-3">
                        <div class="card-header">Totals for {{ name.value }} in {{summary.year}}</div>
                        <div class="card-body">
                            <h5 class="card-title">{{summary.locationCount}} Sites polluted by {{join summary.companies
                                                                                                      ', '}}</h5>
                            <div class="card-text">
                                {{numberFormat summary.count.count}} sewage dumps<br>
                                <span class="spill-hours">{{numberFormat summary.duration.hours}}
                                    h </span>duration<br>
                            </div>

                            <small class="text-muted">
                                {{> chunks/explain-duration summary.duration}}
                                {{> chunks/explain-count summary.count}}
                            </small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="card  mb-3">
                        <div class="card-header">Take Action</div>
                        <div class="card-body">
                            <div class="card-text">
                                {{> components/share-facebook share}}
                                {{> components/share-twitter  share}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{#if live}}
    <div class="container container-fluid" >
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">Daily Data for 2023</div>
                    <div class="card-body">
                        <div class="plot-live observable-plot-container" id="live-data" data-uri="{{live.uri}}"></div>
                        <span style="background-color: #28A64580">&nbsp;&nbsp;&nbsp;&nbsp;</span><span> Monitoring Online </span>
                        <span style="background-color: #333333">&nbsp;&nbsp;&nbsp;&nbsp;</span><span> Monitoring Offline </span>
                        <span style="background-color: #842904">&nbsp;&nbsp;&nbsp;&nbsp;</span><span> Polluting </span>
                        <span style="background-color: #460d83">&nbsp;&nbsp;&nbsp;&nbsp;</span><span> Potentially Polluting </span>
                        <span style="background-color: #3b9acb80">&nbsp;&nbsp;&nbsp;&nbsp;</span><span> Unknown </span>
                    </div>
                    <div class="card-body">Daily data is experimental and data is not guaranteed to be accurate. Please
                        inform us of any issue, we will fix.
                    </div>
                </div>
            </div>
        </div>
    </div>
{{/if}}

<div class="container">

    {{>chunks/horrible-nav}}

    <div class="row">
        <div class="col">
            {{#> components/section title=(concat "Pollution Summary " summary.year)}}

                <p>Here are all the reported sewage overflow totals for {{ name.value }} in {{ summary.year }}.
                    Sometimes sewage can be being dumped for <b>months</b> at a time.</p>

                <div class="table-responsive">
                    <table id="table-csos" class="table">
                        <thead>
                        <tr>
                            <th>Company</th>
                            <th>Waterway</th>
                            <th>Site</th>
                            <th>Sewage Dumps</th>
                            <th>Duration (Hours)</th>
                            <th>Reporting %</th>
                        </tr>
                        </thead>
                        <tbody>
                        {{#each csos}}
                            <tr data-class="cso" data-lat="{{this.cso.location.lat}}"
                                data-lon="{{this.cso.location.lon}}">
                                <td class="align-middle" data-company><a href="{{this.cso.company.uri}}">{{this.cso.company.name}}</a></td>
                                <td class="align-middle" data-waterway><a href="{{this.cso.waterway.uri}}">{{this.cso.waterway.name}}</a></td>
                                <td class="align-middle" data-sitename>{{this.cso.sitename}}</td>
                                <td class="align-middle" data-count>{{numberFormat this.count}}</td>
                                <td class="align-middle" data-duration>{{numberFormat this.duration.toHours}}</td>
                                <td class="align-middle">{{this.reporting}}</td>
                            </tr>
                        {{/each}}
                        </tbody>
                    </table>
                </div>
            {{/components/section}}
        </div>
    </div>
</div>

<div id="footer" class="container">
    <div class="row">
        <div class="col">{{> chunks/data-sources }}</div>
    </div>
    <div class="row">
        <div class="col">{{> chunks/copyright }}</div>
    </div>
</div>


<script>
    const myStyle = {
        "color": "#ff7800",
        "weight": 5,
        "opacity": 0.65
    };

    const map = L.map("map", {scrollWheelZoom: false, dragging: !L.Browser.mobile, tap: !L.Browser.mobile});

    L.tileLayer(
            'https://maps.top-of-the-poops.org/styles/v1/{z}/{x}/{y}.png',
            {
                attribution: document.getElementById("map").querySelector("[data-map-attribution]").innerHTML
            }
    )
            .addTo(map);

    const layer = L.geoJSON(JSON.parse(document.getElementById("map-geojson").textContent), {style: myStyle});
    layer.addTo(map);
    map.fitBounds(layer.getBounds())

    const attr = (a, tr) => {
        const f = tr ? tr : (n => n);
        return n => f(n.attributes[`data-${a}`].value)
    };

    const text = (tr) => {
        const f = tr ? tr : (n => n);
        return n => f(n.textContent)
    };

    const markerIcon = (colour) => {
        return L.icon({
            iconUrl: `/assets/icons/leaflet/marker-icon-${colour}.png`,
            iconRetinaUrl: `/assets/icons/leaflet/marker-icon-2x-${colour}.png`,
            iconAnchor: [5, 55],
            popupAnchor: [10, -44],
            iconSize: [25, 41]
        })
    }

    const markerBlue = markerIcon("blue")
    const markerRed = markerIcon("red")

    const durationIcon = (n) => n > 700 ? markerRed : markerBlue;

    const lat = attr("lat", Number)
    const lon = attr("lon", Number)

    const company = text()
    const sitename = text()
    const waterway = text()
    const count = text(Number)
    const duration = text(Number)

    Array.from(document.getElementById("table-csos").querySelectorAll("tr[data-class='cso']"))
            .map(it => {
                return {
                    lat: lat(it),
                    lon: lon(it),
                    company: company(it.querySelector("[data-company]")),
                    waterway: company(it.querySelector("[data-waterway]")),
                    sitename: sitename(it.querySelector("[data-sitename]")),
                    count: count(it.querySelector("[data-count]")),
                    duration: duration(it.querySelector("[data-duration]"))
                }
            })
            .map(it => {
                return {
                    lat: it.lat, lon: it.lon, duration: it.duration,
                    text: `${it.sitename}<br/>${it.waterway}<br/>${it.count} Dumps / ${it.duration} hours by ${it.company}`
                }
            })
            .map(it => L.marker([it.lat, it.lon], {icon: durationIcon(it.duration)}).bindTooltip(it.text))
            .forEach(it => it.addTo(map))
</script>


<script>
    new DataTable('#table-csos',
            {
                pageLength: 10,
                dom: "<'row'<'col-md-8'p><'col-md-4'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-12 col-md-5'i>>"
            });
</script>

{{#if live}}
    <script type="module">

        import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

        const tt_map = {
            "a": "Monitoring Online",
            "z": "Monitoring Offline",
            "o": "Sewage Overflowing",
            "p": "Potentially Overflowing",
            "u": "Unknown"
        }

        const tt_text = (date, domain) => {
            const [c, v, _] = domain.split("-")
            const t = tt_map[c]

            return `${date}: ${t} up to ${v} hours`
        }

        const colours = {
            domain: [
                "r-0", "r-1", "r-2", "r-3", "r-4", "r-5", "r-6", "r-7", "r-8", "r-9", "r-10", // r = rainfall
                "a-0", "a-4", "a-8", "a-12", "a-16", "a-20", "a-24", // a = available (online)
                "z-0", "z-4", "z-8", "z-12", "z-16", "z-20", "z-24", // z = offline
                "o-0", "o-4", "o-8", "o-12", "o-16", "o-20", "o-24", // o = overflowing
                "p-0", "p-4", "p-8", "p-12", "p-16", "p-20", "p-24", // p = potentially overflowing
                "u-0", "u-4", "u-8", "u-12", "u-16", "u-20", "u-24", // u = unknown
            ],
            range: [
                '#ffffff', 'rgb(247,251,255)', 'rgb(225,237,248)', 'rgb(202,222,240)',
                'rgb(171,207, 230)', 'rgb(130,186,219)', 'rgb(89,161,207)', 'rgb(55,135,192)',
                'rgb(28,106,175)', 'rgb(11,77,148)', 'rgb(8,48,107)',
                "rgba(40,166,69,0.29)", "rgba(40,166,69,0.42)", "#28A64580", "#28A64580", "#28A64580", "#28A64580", "#28A64580",
                "rgba(102,102,102,0.6)", "rgba(102,102,102,0.7)", "rgba(110,110,110,0.9)", "#545454", "#444444", "#444444", "#333333",
                "#f7a974", "#fda863", "#d44a04", "#d44a04", "#d44a04", "#842904", "#842904",
                "#d4d4e8", "#d4d4e8", "#b2b1d5", "#b2b1d5", "#7363ad", "#7363ad", "#460d83",
                "rgba(59,154,203,0.24)", "rgba(59,154,203,0.28)", "rgba(59,154,203,0.36)", "#3b9acb80", "#3b9acb80", "#3b9acb80", "#3b9acb80",
            ],
        };

        const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)

        const LiveDataHorizontalPlot = (data) => {

            const dates = new Array(...new Set(data.cso.map(it => it.d))).map(it => new Date(it))
            const count = new Set(data.cso.map(it => it.p)).size + 1

            console.log(dates);
            console.log(count);

            return Plot.plot({
                marginLeft: 150,
                width: Math.max(1150, vw - 50),
                height: (20 * count) + 60,
                color: colours,
                x: {
                    type: "band",
                    ticks: dates.filter((d, i) => i % 30 === 0),
                    padding: 0.1,
                    grid: false,
                },
                y: {
                    grid: false,
                    label: "",
                },
                marks: [
                    Plot.cell(
                            data.rainfall,
                            {
                                x: d => new Date(d.d),
                                y: d => " Rainfall (mm)", //space -> will come first
                                fill: "r",
                                title: d => `${d.c} mm (75th percentile from ${d.n} nearby stations)`
                            }
                    ),

                    Plot.cell(
                            data.cso,
                            {
                                x: d => new Date(d.d),
                                y: "p",
                                fill: "a",
                                title: d => tt_text(d.d, d.a)
                            }
                    ),
                ]
            })
        };

        const LiveDataVerticalPlot = (data) => {
            const dates = new Array(...new Set(data.cso.map(it => it.d))).map(it => new Date(it))

            return Plot.plot({
                marginTop: 200,
                marginLeft: 100,
                marginBottom: 30,
                width: Math.max(1150, vw - 50),
                height: (20 * dates.length) + 90,
                color: colours,
                y: {
                    type: "band",
                    ticks: dates.filter((d, i) => i % 30 === 0),
                    grid: false,
                    reverse: true,
                },
                x: {
                    axis: "top",
                    grid: false,
                    label: "",
                    tickRotate: 45,
                    padding: 0.3,
                },
                marks: [
                    Plot.cell(
                            data.rainfall,
                            {
                                y: d => new Date(d.d),
                                x: d => " Rainfall (mm)", //space -> will come first
                                fill: "r",
                                title: d => `${d.c} mm (75th percentile from ${d.n} nearby stations)`
                            }
                    ),
                    Plot.cell(
                            data.cso,
                            {
                                y: d => new Date(d.d),
                                x: "p",
                                fill: "a",
                                title: d => tt_text(d.d, d.a)
                            }
                    ),
                ]
            })
        };

        const height = window.innerHeight
        const width = window.innerWidth

        const element = document.getElementById("live-data");
        const uri = element.attributes["data-uri"].value

        const response = await fetch(uri);
        const data = await (response.json())
        if (response.ok) {
            if (height > (width * 1.4)) {
                element.appendChild(LiveDataVerticalPlot(data));
                element.classList.add("vertical")
            } else {
                element.appendChild(LiveDataHorizontalPlot(data))
                element.classList.add("horizontal")
            }
        }
    </script>
{{/if}}

</body>
</html>