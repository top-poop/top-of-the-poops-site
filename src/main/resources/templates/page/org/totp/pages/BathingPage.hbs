<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>Top of the Poops | Bathing Area | {{ name }}</title>
    <meta name="description" content="Analysing sewage dumps by water companies at {{ name }}">

    {{> chunks/favicons }}
    {{> chunks/meta-styles }}
    {{> chunks/meta-scripts }}
    {{> chunks/meta-leaflet }}

    {{> components/meta-opengraph
            title=(concat "Bathing Area | " name)
            twitterImageUri=share.twitterImageUri
    }}

    <style>
        .card {
            transition: all 0.3s ease;
            border: none;
        }

        .map {
            min-height: 500px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    </style>

</head>
<body>
{{> chunks/navbar }}

{{#> components/jumbotron }}
    <div class="text-center">
        <h1 class="display-4 fw-bold">{{ name.value }}</h1>
        <p class="lead fs-4">
            Polluted by sewage <span class="badge bg-danger fs-5">{{numberFormat summary.count.count}}</span> times
            in {{summary.year}} - lasting <span class="badge bg-danger fs-5">{{numberFormat summary.duration.hours}}
            hours</span>
            {{#gt summary.duration.years 1}}
                - That's <em class="text-danger fw-bold">{{numberFormat summary.duration.years}} years!</em>
            {{/gt}}
        </p>
        <p class="lead">
            {{#if summary.zeroReportingCount gt 0}}
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Monitoring was disabled in some locations, so could be more
            {{else if summary.lowReportingCount gt 0}}
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Monitoring fell below 50% in some locations so could be more
            {{/if}}
        </p>
    </div>
{{/components/jumbotron}}


<div class="container-fluid py-4">
    <div class="row g-4">
        <div class="col-md-8">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    <div id="map" class="map">
                        <div style="display:none" data-map-attribution>
                            &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors
                            <br/>
                            Contains OS Data &copy; Crown copyright &amp; database right 2021-2024<br/>
                            &copy; <a href="https://top-of-the-poops.org">Top of the Poops</a> 2021-2024
                        </div>
                    </div>
                    {{#each boundaries}}
                        <div style="display: none" class="map-geojson">{{this}}</div>
                    {{/each}}
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0"><i class="bi bi-bar-chart-fill me-2"></i>Totals for {{ name }}
                        in {{summary.year}}</h2>
                </div>
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-3">
                        <i class="bi bi-geo-alt me-1 text-danger"></i>
                        {{summary.locationCount}} Sites polluted by {{join summary.companies ', '}}
                    </h5>
                    <div class="card-text mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-droplet-fill text-primary me-2"></i>
                            <span>{{numberFormat summary.count.count}} sewage dumps</span>
                        </div>
                        <div class="d-flex align-items-center">
                            <i class="bi bi-clock-fill text-danger me-2"></i>
                            <span class="spill-hours">{{numberFormat summary.duration.hours}} hours duration</span>
                        </div>
                    </div>

                    <div class="alert alert-secondary mt-3 mb-0">
                        <small>
                            {{> chunks/explain-duration summary.duration}}
                            {{> chunks/explain-count summary.count}}
                        </small>
                    </div>
                </div>
            </div>

            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0"><i class="bi bi-shield-fill-exclamation me-2"></i>How does {{name}} compare?
                    </h2>
                </div>
                <div class="card-body">
                    <p class="mb-0">{{name}} was the <span
                            class="badge bg-danger">#{{rank.rank}}</span> most polluted bathing area in England & Wales,
                        by duration of sewage overflows, as reported by the water companies</p>
                </div>
            </div>

            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0"><i class="bi bi-megaphone-fill me-2"></i>Take Action</h2>
                </div>
                <div class="card-body">
                    <div class="d-flex gap-2">
                        {{> components/share-social share}}
                    </div>
                </div>
            </div>

            {{> chunks/plea }}

            {{#if constituencyRank}}
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-primary text-white">
                        <h2 class="h5 mb-0"><i class="bi bi-geo-alt-fill me-2"></i>Local Constituency</h2>
                    </div>
                    <div class="card-body">
                        <a href="{{constituencyRank.constituency.uri}}" class="text-decoration-none">
                            <button class="btn btn-outline-primary">
                                <i class="bi bi-geo-fill me-1"></i>
                                {{constituencyRank.constituency.name}}<span
                                    class="badge bg-secondary ms-1">{{numberFormat constituencyRank.count.count}}</span>
                            </button>
                        </a>
                    </div>
                </div>
            {{/if}}
        </div>
    </div>
</div>

<div class="container py-5">
    <div class="row">
        <div class="col">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h2 class="h4 mb-0"><i class="bi bi-clipboard-data me-2"></i>Pollution Summary {{summary.year}}</h2>
                </div>
                <div class="card-body p-4">
                    <div class="d-flex">
                        <div class="me-2">
                            <i class="bi bi-info-circle-fill fs-4 text-primary"></i>
                        </div>
                        <div>
                            <p class="mb-0">Here are all the reported sewage overflow totals for {{ name }}
                                in {{ summary.year }}.</p>
                        </div>
                    </div>

                    <div class="alert alert-warning mt-3">
                        <div class="d-flex">
                            <div class="me-2">
                                <i class="bi bi-exclamation-triangle-fill fs-4"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">Accuracy Warning</h5>
                                <p class="mb-0">We use data from the water companies, but we are seeing many anomalies
                                    that make us believe that
                                    bathing location information is quite poor. The situation is likely <b>far worse</b>
                                    than reported here.</p>
                                <p class="mb-0 mt-2">If the locations of the sewage outlets look a bit unusual, it is
                                    likely that the reporting of the data from the water company is in error. We rely on
                                    their data in order to draw these maps.</p>
                                <p class="mb-0 mt-2">Other CSOs may also be located nearby, however the water companies
                                    claim that these do not affect the water quality here.</p>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive mt-4">
                        <table id="table-csos" class="table table-hover">
                            <thead class="table-light">
                            <tr>
                                <th>Company</th>
                                <th>Waterway</th>
                                <th>Site</th>
                                <th>Sewage Dumps</th>
                                <th>Duration (Hours)</th>
                                <th>Reporting %</th>
                            </tr>
                            </thead>
                            <tbody>
                            {{#each csos}}
                                <tr data-class="cso" data-lat="{{this.cso.location.lat}}"
                                    data-lon="{{this.cso.location.lon}}">
                                    <td class="align-middle" data-company="{{this.cso.company.name}}">
                                        <i class="bi bi-building me-1 text-muted"></i>
                                        <a href="{{this.cso.company.uri}}">{{this.cso.company.name}}</a>
                                    </td>
                                    <td class="align-middle" data-waterway="{{this.cso.waterway.name}}">
                                        <i class="bi bi-water me-1 text-primary"></i>
                                        <a href="{{this.cso.waterway.uri}}">{{this.cso.waterway.name}}</a>
                                    </td>
                                    <td class="align-middle"
                                        data-sitename="{{this.cso.sitename}}">{{this.cso.sitename}}</td>
                                    <td class="align-middle" data-count="{{this.count.count}}">{{numberFormat
                                            this.count.count}}</td>
                                    <td class="align-middle" data-duration="{{this.duration.hours}}">{{numberFormat
                                            this.duration.hours}}</td>
                                    <td class="align-middle{{#lt this.reporting 50}} text-danger{{/lt}}"
                                        data-reporting="{{this.reporting}}">{{numberFormat this.reporting}}</td>
                                </tr>
                            {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col">{{> chunks/data-sources }}</div>
    </div>
</div>

{{> chunks/footer }}
<script>
    const myStyle = {
        "color": "#ff7800",
        "weight": 5,
        "opacity": 0.65
    };

    const map = L.map("map", {
        scrollWheelZoom: false,
        dragging: !L.Browser.mobile,
        tap: !L.Browser.mobile,
        maxZoom: 18,
    });


    var gl = L.maplibreGL({
        style: 'https://top-of-the-poops.org/tiles/styles/v2/style.json',
        attribution: document.getElementById("map").querySelector("[data-map-attribution]").innerHTML
    }).addTo(map);

    const bathingAreaLayers = Array.from(document.getElementsByClassName("map-geojson"))
            .map(it => L.geoJSON(JSON.parse(it.textContent), {style: myStyle}))

    bathingAreaLayers.forEach(it => it.addTo(map))

    const geoBounds = bathingAreaLayers.reduce((acc, m) => {
        if (acc == null) {
            return m.getBounds();
        } else {
            return acc.extend(m.getBounds())
        }
    }, null)

    const attr = (a, tr) => {
        const attributeName = `data-${a}`
        const f = tr ? tr : (n => n);
        return n => f(n.attributes[attributeName].value)
    };

    const text = (tr) => {
        const f = tr ? tr : (n => n);
        return n => f(n.textContent)
    };

    const markerIcon = (colour) => {
        return L.icon({
            iconUrl: `/assets/icons/leaflet/marker-icon-${colour}.png`,
            iconRetinaUrl: `/assets/icons/leaflet/marker-icon-2x-${colour}.png`,
            iconAnchor: [5, 55],
            popupAnchor: [10, -44],
            iconSize: [25, 41]
        })
    }

    const markerBlue = markerIcon("blue")
    const markerRed = markerIcon("red")

    const durationIcon = (n) => n > 700 ? markerRed : markerBlue;

    const lat = attr("lat", Number)
    const lon = attr("lon", Number)

    const company = attr("company")
    const sitename = attr("sitename")
    const waterway = attr("waterway")
    const count = attr("count", Number)
    const duration = attr("duration", Number)

    const markers = Array.from(document.getElementById("table-csos").querySelectorAll("tr[data-class='cso']"))
            .map(it => {
                return {
                    lat: lat(it),
                    lon: lon(it),
                    company: company(it.querySelector("[data-company]")),
                    waterway: waterway(it.querySelector("[data-waterway]")),
                    sitename: sitename(it.querySelector("[data-sitename]")),
                    count: count(it.querySelector("[data-count]")),
                    duration: duration(it.querySelector("[data-duration]"))
                }
            })
            .map(it => {
                return {
                    lat: it.lat, lon: it.lon, duration: it.duration,
                    text: `${it.sitename}<br/>${it.waterway}<br/>${it.count} Dumps / ${it.duration} hours by ${it.company}`
                }
            })
            .map(it => L.marker([it.lat, it.lon], {icon: durationIcon(it.duration)}).bindTooltip(it.text))


    markers.forEach(it => it.addTo(map))

    const bounds = markers.reduce((acc, m) => {
        if (acc == null) {
            return geoBounds != null ? geoBounds.extend(m.getLatLng()) : L.latLngBounds(m.getLatLng(), m.getLatLng());
        } else {
            return acc.extend(m.getLatLng())
        }
    }, null)

    map.fitBounds(bounds)
</script>


<script>
    new DataTable('#table-csos', {
        pageLength: 10,
        dom: "<'row'<'col-md-8'p><'col-md-4'f>>" +
                "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-12 col-md-5'i>>",
        language: {
            search: '<i class="bi bi-search"></i> _INPUT_',
            searchPlaceholder: 'Search...',
        }
    });
</script>

</body>
</html>
